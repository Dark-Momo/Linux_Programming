Source : https://www.cs.kent.edu/~ruttan/sysprog/lectures/signals.html

1. What is Signal?

A signal is a kind of (usually software) interrupt, used to announce asynchronous events to a process.
By their nature, they interrupt whatever the process is doing at this moment, and force it to handle them immediately.
Each signal may have a signal handler, which is a function that gets called when the process receives that signal.

The signal handler function is called in "asynchronous mode", meaning that no where in your program you have code that calls
this function directly. Instead, when the signal is sent to the process, the operating system stops the execution of the process,
and "forces" it to call the signal handler function. When that signal handler function returns, the process continues execution
from wherever it happened to be before the signal was received, as if this interruption never occurred.
---------------------------------------------------
Interrupts          - Hardware -> OS;
Signals             - OS/Other process -> Process;
Software Interrupts - Hardware -> OS;
---------------------------------------------------
So signals are different from software interrupts.

2. Sending Signals To Processes
=========================================
2.1 Sending Signals Using Keyboard
=========================================
The most common way of sending signals to processes is using the keyboard. There are certain key presses that are taken
by the system as requests to send signals to the process with which we are interacting:

Ctrl-C
    Pressing this key causes the system to send an INT signal (SIGINT) to the running process.
    By default, this signal causes the process to immediately terminate.

Ctrl-\
    Pressing this key causes the system to send a ABRT signal (SIGABRT) to the running process.
    By default, this signal causes the process to immediately terminate.
    Note that this redundancy (i.e. Ctrl-\ doing the same as Ctrl-C) gives us some better flexibility.

Ctrl-Z
    Pressing this key causes the system to send a TSTP signal (SIGTSTP) to the running process.
    By default, this signal causes the process to suspend execution.

=========================================
2.2 Sending Signals From The Command Line
=========================================
The kill command accepts two parameters: a signal name (or number), and a process ID. Usually the syntax for
using it goes something like:
--------------------
kill -<signal> <PID>
--------------------
For example, in order to send the INT signal to process with PID 5342, type:
kill -INT 5342

=========================================
2.3 Sending Signals Using System Calls
=========================================
A third way of sending signals to processes is by using the kill system call. This is the normal way of sending
a signal from one process to another.

3. Catching Signals - Signal Handlers

3.1 Catchable And Non-Catchable Signals
Signals that the process cannot catch will cause the process to terminate.
For example, SIGKILL (-9), SIGSTOP is a signal that a process cannot catch, and forces the process's suspension immediately.

Many other signals are catchable, and this includes the famous SEGV and BUS signals. You probably have seen numerous 
occasions when a program has exited with a message such as 'Segmentation Violation - Core Dumped', 
or 'Bus Error - core dumped'. 
- In the first occasion, a SEGV signal was sent to your program due to accessing an illegal memory address. 
- In the second case, a BUS signal was sent to your program, due to accessing a memory address with invalid alignment. 
- In both cases, it is possible to catch these signals in order to do some cleanup - kill child processes, perhaps remove 
  temporary files, etc. Although in both cases, the memory used by your process is most likely corrupt, it's probable that 
  only a small part of it was corrupt, so cleanup is still usually possible.

3.2 Defaulf Signal Handlers
If you don't have a signal handler defined bu yourself, the runtime environment sets up a set of default signal handlers for you.
- Default signal handler for the TERM(No.15, same as No.9) signal calls the exit() system call;
- Default handler for the ABRT(No.6) signal calls the abort() system call, which causes the process's memory image to be dumped into 
  a file named 'core' in the process's current directory, and then exit. 
